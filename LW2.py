import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = "7549198402:AAFx4qfQ8f6JlQPN_bHxcPLlTIAUWxEEkls"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ¬´–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö¬ª —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
students_data = {
    "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞":       {"attendance": "8/10",  "score": 85},
        "–§–∏–∑–∏–∫–∞":           {"attendance": "9/10",  "score": 92},
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": {"attendance": "10/10", "score": 99},
    },
    "–ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞":  {"attendance": "7/10",  "score": 76},
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": {"attendance": "10/10", "score": 88},
    },
    "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞": {
        "–•–∏–º–∏—è":            {"attendance": "9/10",  "score": 90},
        "–ë–∏–æ–ª–æ–≥–∏—è":         {"attendance": "8/10",  "score": 81},
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": {"attendance": "9/10",  "score": 95},
    },
}


# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    CHOOSING_STUDENT    = State()
    CHOOSING_DISCIPLINE = State()


# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bot –∏ Dispatcher
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    @dp.message(Command(commands=["start"]))
    async def cmd_start(message: types.Message, state: FSMContext):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º ReplyKeyboardMarkup —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Form.CHOOSING_STUDENT.
        """
        # –ü–æ—Å—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ ‚Äî –ø–æ –æ–¥–Ω–æ–º—É –∏–º–µ–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        keyboard = [
            [types.KeyboardButton(text=name)]
            for name in students_data.keys()
        ]
        markup = types.ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
            "–ü–æ–∫–∞–∂—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∏ –±–∞–ª–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=markup
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        await state.set_state(Form.CHOOSING_STUDENT)

    # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≤—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞ (Form.CHOOSING_STUDENT)
    @dp.message(Form.CHOOSING_STUDENT)
    async def process_student_choice(message: types.Message, state: FSMContext):
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª (–∏–ª–∏ –≤–≤—ë–ª) –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞.
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.
        """
        chosen_name = message.text.strip()

        if chosen_name not in students_data:
            await message.answer(
                "‚ö†Ô∏è –Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            return  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ FSMContext
        await state.update_data(chosen_student=chosen_name)

        # –ü–æ—Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏ —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        keyboard = [
            [types.KeyboardButton(text=discipline)]
            for discipline in students_data[chosen_name].keys()
        ]
        markup = types.ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"‚úèÔ∏è –í—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç: *{chosen_name}*.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
            parse_mode="Markdown",
            reply_markup=markup
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        await state.set_state(Form.CHOOSING_DISCIPLINE)

    # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≤—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (Form.CHOOSING_DISCIPLINE)
    @dp.message(Form.CHOOSING_DISCIPLINE)
    async def process_discipline_choice(message: types.Message, state: FSMContext):
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª (–∏–ª–∏ –≤–≤—ë–ª) –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω–∞ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞. –ï—Å–ª–∏ –¥–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ.
        """
        data = await state.get_data()
        student_name = data.get("chosen_student")
        chosen_discipline = message.text.strip()

        if student_name is None or chosen_discipline not in students_data[student_name]:
            await message.answer(
                "‚ö†Ô∏è –¢–∞–∫–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            return  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

        info = students_data[student_name][chosen_discipline]
        attendance = info.get("attendance", "‚Äî")
        score = info.get("score", "‚Äî")

        result_text = (
            f"üìã *–°—Ç—É–¥–µ–Ω—Ç:* {student_name}\n"
            f"üìö *–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:* {chosen_discipline}\n"
            f"üóì *–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å:* {attendance}\n"
            f"üèÖ *–ë–∞–ª–ª—ã:* {score}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM
        await message.answer(
            result_text,
            parse_mode="Markdown",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()

        # –ü—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ ‚Äî –≤–≤–µ–¥–∏—Ç–µ /start")

    # –§–æ–ª–±—ç–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @dp.message()
    async def fallback(message: types.Message):
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

# –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    asyncio.run(main())
